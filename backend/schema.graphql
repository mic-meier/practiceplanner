input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createRoutine(data: RoutineCreateInput!): Routine
  createRoutines(data: [RoutineCreateInput!]!): [Routine]
  updateRoutine(
    where: RoutineWhereUniqueInput!
    data: RoutineUpdateInput!
  ): Routine
  updateRoutines(data: [RoutineUpdateArgs!]!): [Routine]
  deleteRoutine(where: RoutineWhereUniqueInput!): Routine
  deleteRoutines(where: [RoutineWhereUniqueInput!]!): [Routine]
  createExercise(data: ExerciseCreateInput!): Exercise
  createExercises(data: [ExerciseCreateInput!]!): [Exercise]
  updateExercise(
    where: ExerciseWhereUniqueInput!
    data: ExerciseUpdateInput!
  ): Exercise
  updateExercises(data: [ExerciseUpdateArgs!]!): [Exercise]
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteExercises(where: [ExerciseWhereUniqueInput!]!): [Exercise]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  exercises(
    where: ExerciseWhereInput! = {}
    orderBy: [ExerciseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Exercise!]
  exercisesCount(where: ExerciseWhereInput! = {}): Int
  routines(
    where: RoutineWhereInput! = {}
    orderBy: [RoutineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Routine!]
  routinesCount(where: RoutineWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  email: StringNullableFilter
  password: PasswordFilter
  role: RoleWhereInput
  exercises: ExerciseManyRelationFilter
  routines: RoutineManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input ExerciseManyRelationFilter {
  every: ExerciseWhereInput
  some: ExerciseWhereInput
  none: ExerciseWhereInput
}

input RoutineManyRelationFilter {
  every: RoutineWhereInput
  some: RoutineWhereInput
  none: RoutineWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  exercises: ExerciseRelateToManyForUpdateInput
  routines: RoutineRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input ExerciseRelateToManyForUpdateInput {
  disconnect: [ExerciseWhereUniqueInput!]
  set: [ExerciseWhereUniqueInput!]
  create: [ExerciseCreateInput!]
  connect: [ExerciseWhereUniqueInput!]
}

input RoutineRelateToManyForUpdateInput {
  disconnect: [RoutineWhereUniqueInput!]
  set: [RoutineWhereUniqueInput!]
  create: [RoutineCreateInput!]
  connect: [RoutineWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  exercises: ExerciseRelateToManyForCreateInput
  routines: RoutineRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input ExerciseRelateToManyForCreateInput {
  create: [ExerciseCreateInput!]
  connect: [ExerciseWhereUniqueInput!]
}

input RoutineRelateToManyForCreateInput {
  create: [RoutineCreateInput!]
  connect: [RoutineWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  canManageContent: BooleanNullableFilter
  canManageUsers: BooleanNullableFilter
  users: UserManyRelationFilter
}

input BooleanNullableFilter {
  equals: Boolean
  not: BooleanNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Routine {
  id: ID!
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  exercises(
    where: ExerciseWhereInput! = {}
    orderBy: [ExerciseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Exercise!]
  exercisesCount(where: ExerciseWhereInput! = {}): Int
}

input RoutineWhereInput {
  AND: [RoutineWhereInput!]
  OR: [RoutineWhereInput!]
  NOT: [RoutineWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  description: StringNullableFilter
  notes: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  exercises: ExerciseManyRelationFilter
}

input DateTimeNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: DateTimeNullableFilter
}

input RoutineWhereUniqueInput {
  id: ID
}

input RoutineOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RoutineUpdateInput {
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneForUpdateInput
  exercises: ExerciseRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RoutineUpdateArgs {
  where: RoutineWhereUniqueInput!
  data: RoutineUpdateInput!
}

input RoutineCreateInput {
  name: String
  description: String
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneForCreateInput
  exercises: ExerciseRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Exercise {
  id: ID!
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: User
  routines(
    where: RoutineWhereInput! = {}
    orderBy: [RoutineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Routine!]
  routinesCount(where: RoutineWhereInput! = {}): Int
}

enum ExerciseCategoryType {
  technique
  theory
  earTraining
  repertoire
}

input ExerciseWhereInput {
  AND: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  NOT: [ExerciseWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  description: StringNullableFilter
  category: ExerciseCategoryTypeNullableFilter
  duration: IntNullableFilter
  notes: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  routines: RoutineManyRelationFilter
}

input ExerciseCategoryTypeNullableFilter {
  equals: ExerciseCategoryType
  in: [ExerciseCategoryType!]
  notIn: [ExerciseCategoryType!]
  not: ExerciseCategoryTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ExerciseWhereUniqueInput {
  id: ID
  name: String
}

input ExerciseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  category: OrderDirection
  duration: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExerciseUpdateInput {
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneForUpdateInput
  routines: RoutineRelateToManyForUpdateInput
}

input ExerciseUpdateArgs {
  where: ExerciseWhereUniqueInput!
  data: ExerciseUpdateInput!
}

input ExerciseCreateInput {
  name: String
  description: String
  category: ExerciseCategoryType
  duration: Int
  notes: String
  createdAt: String
  updatedAt: String
  user: UserRelateToOneForCreateInput
  routines: RoutineRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  routines(
    where: RoutineWhereInput! = {}
    orderBy: [RoutineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Routine!]
  routine(where: RoutineWhereUniqueInput!): Routine
  routinesCount(where: RoutineWhereInput! = {}): Int
  exercises(
    where: ExerciseWhereInput! = {}
    orderBy: [ExerciseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Exercise!]
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  exercisesCount(where: ExerciseWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
